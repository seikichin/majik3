
   ##### Efuns, the most vital part on any lpmud #####

Efuns are the basic of the lpc language, they are the functions that are
defined within the program that runs the mud. Efuns are called directly
from programs and does _always_ return a value, but you may not want to
use this value and you can then just discard it by just not using it.
Refer to the syntax chapter for more info on how to call efuns.

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	add_action - add an action to an object
	
SYNOPSIS
	void add_action(string function, string verb, void|int part)

DESCRIPTION
	This function adds an action to the `living' object that
	the command is run by. `function' is the function name that
	is to be run when the command verb `verb' is given.

	If `part' is defined (not 0) only a part of the given verb
	need to be given for the command to work

	For example:

	add_action("foobar", "tele", 1);
	
	will match on "tele" or "teleledning" while the whole verb
	"teleledningsanka" will have to be given for this expression:

	add_action("foobar", "teleledningsanka", 0); or
	add_action("foobar", "teleledningsanka");

NOTA BENE
	For this action to be added to an object, the object must be
	`living', i.e. the function "enable_commands()" must have been
	performed in the object prior to the "add_action()".
	
SEE ALSO
	disable_commands, enable_commands, living, _query_action, query_verb

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	add_verb - add a verb to an action

SYNOPSIS
	void add_verb(string str)

DESCRIPTION
	This function is connected to the "add_action()" function. It will
	set up the command "str" to trigger a call to the function set up
	by the	previous call to "add_action()".

BUGS
	This function is now obsolete as the verb can be given directly with
	add_action(). add_verb() remains for compatibility.

SEE ALSO
	 efun/add_action efun/query_verb

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	all_inventory - return the contents of an object
	
SYNOPSIS
	object *all_inventory(object ob)

DESCRIPTION
	This function returns an array of the objects contained in `ob'.
	If `ob' is not specified "this_object()" is used by default.

SEE ALSO
	first_inventory, next_inventory, deep_inventory

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	all_inventory - return the contents of an object
	
SYNOPSIS
	object *all_inventory(object ob)

DESCRIPTION
	This function returns an array of the objects contained in `ob'.

	If `ob' is not specified "this_object()" is used by default.

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	allocate - create an array of n elements
	
SYNOPSIS
	mixed *allocate(int n);

DESCRIPTION
	This function returns an empty array of `n' elements. All
	values in the array are initialized to 0.

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	call_other - call a function in another object
	
SYNOPSIS
	mixed call_other(object ob|string ob, string func, ...)

DESCRIPTION
	This function is used to call another function in a given
	object. If the object `ob' is given as a string call_other
	tries to find it using "find_object()". If not found
	call_other tries to load it, otherwise the object pointer
	is used directly. If the object is given as a string, the
	absolute path to the object must be given.
	`func' should simply be the name of the function to be called.
	Any number of arguments to the function can be added to the
	call.

	Example:

	name = (string)call_other(find_player("commander"), "query_real_name");
	access = (int)call_other("/secure/master", "valid_read", 
		"/DONE", "commander", "my_func");

	"call_other()" can also be performed using "->" with this syntax:

	name = (string)find_player("commander")->query_real_name();
	access = (int)"/secure/master"->valid_read("/DONE", "commander", 
							"my_func");
	
NOTA BENE
	The default type of "call_other()" is unknown, but as shown in the
	examples above it is always possible to cast to a type of your
	own choosing, if nothing else only to aid memory.

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	call_out - delayed execution of a function
	
SYNOPSIS
	void call_out(string func, int delay, void|mixed arg)

DESCRIPTION
	With this function you can delay the call of a name function
	`func' for `delay' seconds. If `arg' is specified it is passed
	as an argument to the function.
	The value of "this_player()" in the function will be the same
	as it was when "call_out" was called.

NOTA BENE
	The smallest time-unit in the game is a heartbeat (2 seconds). 
	This means that even though you might specify an odd-second delay, 
	it will	still be executed on a full heartbeat (even second).

SEE_ALSO
	call_out_info, find_call_out, remove_call_out

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	call_out_info - get info on all pending call outs

SYNOPSIS
	mixed *call_out_info()

DESCRIPTION
	Get information about all pending call outs. An array is returned,
	where every item in the array consists 4 elements:

	({
	  The object,
	  The function,
	  The delay left,
	  The optional argument
        })
	
BUGS
	The time left might be less than zero.

See also:  call_out, remove_call_out, find_call_out

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	capitalize - make the first letter of a string uppercase
	
SYNOPSIS
	string capitalize(string str)

DESCRIPTION
	With this command the first letter of a string is made
	upper-case.

SEE ALSO
	lower_case

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	cat - print part of a file on the screen
	
SYNOPSIS
	int cat(string file, void|int start, void|int len)

DESCRIPTION
	This functions prints a file or a part of a file on to the
	screen. `file' is the path the file, `start' (if given) is
	the starting line and `len' (if given) the number of lines 
	to be printed

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	catch - catch errors

SYNOPSIS
	mixed catch(expr)

DESCRIPTION
	Evaluate 'expr'. If there is no error, 0 is returned. If there
	is a standard error, a string (with a leading '*') will be returned.
	The function throw(value) can also be used to immediately return
	 any value, except 0.

NOTA BENE
	The catch() is somewhat costly, and should not be used anywhere.
	 Rather, use it at places where an error would destroy consistency.

SEE ALSO
	throw

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	cindent - indent and format an LPC program source file

SYNOPSIS
	int cindent(string path)

DESCRIPTION
	Indents and formats the named file in the same way as the
	UNIX program indent.

SEE ALSO
	ed

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	clear_bit - clear a bit in a string bitfield

SYNOPSIS
	string clear_bit(string bitstring, int pos)

DESCRIPTION
	This function will clear the indicated bit in the given bitstring.

SEE ALSO
	set_bit, test_bit

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	clone_object - clone an object

SYNOPSIS
	object clone_object(string path)

DESCRIPTION
	This funciton clones an object indicated by the path.

SEE ALSO
	destruct

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	command - execute a command in a living object

SYNOPSIS
	int command(string command)

DESCRIPTION
	With this function an object can command itself to perform
	an action that previously has been added with add_action.
	The given string `command' should be on the same format as
	if it had been given from the command line.

	`command()' returns the number eval-cycles that was used to perform
	the command, or 0 if it proved impossble due to eval-cost.

	A force function can then simply be implemented in the player-
	object like this:

	nomask int /* We'd rather not have anyone shadowing this function */
	force_player(string command)
	{
	    if (ok_to_force())
	        if (command(command))
	   	    return 1;

	    return 0;
	}

	The function `ok_to_force()' can then determine if it is permitted
	for the person that tries to execute the command to force the
	player or not.

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	crypt - encrypt a string

SYNOPSIS
	string crypt(string data, string key|int random)

DESCRIPTION
	This function encrypts the given `data' using the given encryption
	`key'. If the the second argument is given as an integer, the
	encryption is done with a random key.

EXAMPLE
	string pw,login_pw;
	/* crypt */
	pw=crypt(pw,0);

	/* check if login_pw is right */
	if(crypt(login_pw,pw)==pw) ok();

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	ctime - convert time stamp to string

SYNOPSIS
	string ctime(int time)

DESCRIPTION
	This funtion converts the given `time' to a string.

SEE ALSO
	time

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	debug_info - Print some internal information

SYNOPSIS
	mixed debug_info(int i,mixed o)

DESCRIPTION
	This is supposed to be a general function for getting inside driver
	debug information but so far it can only print a lot of stuff about
	objects and it doesn't return anything sensible. The integer i can
	so far only be the values 0 or 1 it decides what information to print.
	The mixed argument o is for these values of i supposed to be the
	object to print information about.

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	deep_inventory - recursive inventory of an object

SYNOPSIS
	object *deep_inventory(object ob)

DESCRIPTION
	This function returns a list of the all the objects contained
	by the given `object' including the objects contained in other
	objects. The inventory of `object' is searched recursively in
	order to produce this list.

SEE ALSO
	all_inventory, environment, first_inventory, next_inventory

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	destruct - destruct an object

SYNOPSIS
	void destruct(object ob)

DESCRIPTION
	This function destroys the indicated object.

SEE ALSO
	clone_object

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	disable_commands - set an object `non-living'

SYNOPSIS
	void disable_commands()

DESCRIPTION
	With this function an object is made `non-living'. This disables
	the adding of commands from entering rooms or objects that move
	into the inventory of this object.

SEE ALSO
	enable_commands, move_object

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	ed - edit a file

SYNOPSIS
	void ed(void|string path, void|string exit_func)

DESCRIPTION
	With this function an interactive object (a player) can edit
	a file with the given path. If no `path' is given, the file
	of your's that last had an error in it is taken. `exit_func' 
	is called on completion	of the command.

	This function is subject to the rules given by the functions
	`valid_read()' and `valid_write()'.

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	enable_commands - set an to be object `living'

SYNOPSIS
	void enable_commands(void)

DESCRIPTION
	This function makes an object `living'. It will now pick up
	commands defined by `add_action()' and can listen to what is
	said in its environment.

SEE ALSO
	disable_commands, move_object

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	environment - find the environment of an object

SYNOPSIS
	object environment(object ob)

DESCRIPTION
	This function returns the object that has `ob' in its inventory, 
	the environment of `ob'. If no object is given as argument,
	`this_object()' is used by default.
	If no environment to `ob' is found, 0 is returned.

SEE ALSO
	all_inventory, deep_inventory, first_inventory, next_inventory

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	exec - connect a socket to a new object

SYNOPSIS
	int exec(object new, object old)

DESCRIPTION
	This function is used to shift an interactive user betwen two
	objects. The function `valid_exec()' is called in `/secure/master.c'
	with the calling object as argument. If `valid_exec()' accepts
	the calling object the interactive user is switched from the object
	`old' to `new'.

NOTA BENE
	It is very easy to become confused when writing the code that uses
	this efun. All the internal variables like `this_player()' or
	`this_object()' remain unchanged, it is just the user that is 
	switched between the objects.

CAVEAT
	This is one of the greater threats to security in the system. Unless
	the use is this efun is rigorously restricted anyone can become arch
	or keeper.

FRIENDLY ADVICE
	Don't do this unless you're damn certain you what you are doing.


:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	explode - explode a string into subparts

SYNOPSIS
	string *explode(string str, string break_string)

DESCRIPTION
	This function returns an array of the strings resulting from
	dividing `str' into the component strings separated by 
	`break_string'. If `break_string' is given as "", `str' is
	returned. All leading appearances of `break_string' is removed
	and so is one at the end if existing. If `str' only consist
	of repeating occurances of `break_string', 0 is returned.

SEE ALSO
	implode, sprintf

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	export_euid - Export this objects euid to another objects uid

SYNOPSIS
	int export_euid(object o)

DESCRIPTION
	This function tries to set the object o's uid to this objects euid.
	This operation can only be done if o has the euid zero. Export_euid
	returns 1 if the operation is successful. Remember that the object
	that recives the uid must set its _euid_ to that value to be able
	to use it. This function is available so that one object can 'trust'
	another.  

SEE ALSO
	get_uid, get_euid, set_uid

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	extract - extract a subpart of a string

SYNOPSIS
	string extract(string str, void|int start, void|int to)

DESCRIPTION
	Get a subpart of a string. Both 'start' and 'to' is a position in
	'str'. If the position(s) is negative then it is counted from the
	end of the string.
	If the 'start' is bigger than 'to' then an empty string is
	returned. An empty string is also returned if the subpart is
	outside the string in its entirety.
	Both positions is optional. If no position is given then 'str' is
	returned.
	If only 'start' is given then a string from 'start' to the end of
	'str' is returned.

SEE ALSO
	capitalize, lower_case, explode, implode

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	file_name - find the filename of an object

SYNOPSIS
	string file_name(object ob)

DESCRIPTION
	This function gives the filename of an object concatenated with
	a possible instance number. This typically is a string on the
	form "/std/weapon#423". Instance numbers are unique for all
	objects in the game.

	If a filename has no instance number it is the 'master object' and
	not a 'cloned copy'. 

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	file_size - return the size of a file

SYNOPSIS
	int file_size(string path)

DESCRIPTION
	This function returns the size, in bytes, of an existing file. If the
	file does not exist, file_size returns -1.

	If the file is actually a directory and not a file, -2 will be
	returned.

SEE ALSO
	file_name

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	filter_array - filter an array through a seive

SYNOPSIS
	mixed *filter_array(mixed *arr, string fun, object ob, mixed extra);

	Returns an array holding the items of 'arr' filtered through
	ob->fun(). The function 'fun' in 'ob' is called for each element
	in 'arr' with that element as parameter. A second parameter 'extra'
	is sent in each call if given. If ob->fun(arr[.index.], extra)
	returns 1 the element is included in the returned array. 

SEE ALSO
	map_array

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	filter_mapping - filter a mapping over a function

SYNOPSIS
	mapping filter_mapping(mapping m,string fun,object o,mixed extra)

DESCRIPTION
	Filter_mapping calls the function fun with every value in the mapping
	m as argument. If the function returns zero that value will be
	excluded from the restulting mapping, otherwise it will be included.
	If the optional extra argument is present that is also sent to the
	function as a second argumet.

SEE ALSO
	map_mapping,map_array,filter_array

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	find_call_out - find the remaining call_out time of a function

SYNOPSIS
	int find_call_out(string func)

DESCRIPTION
	This function returns the number of seconds left until the given
	function `func' is to be executed. If there is no pending call to 
	`func' -1 will be return.

BUGS
	Not trustable, it can return a negative number even if there is a
	call waiting.

SEE ALSO
	call_out, remove_call_out, call_out_info

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	find_living - find a named living object

SYNOPSIS
	object find_living(string name)

DESCRIPTION
	This function returns the living object with the given `name'.

	The argument `name' must be given in lowercase for this function
	to work.

NOTA BENE
	For this function to work, the object must have added its name 
	to the game-driver internal list by calling the function 
	`set_living_name()'. Just making it living with `enable_commands()'
	is not enough.

SEE ALSO
	set_living_name, enable_commands, find_player, find_object


:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	find_object - find a named object

SYNOPSIS
	object find_object(string path_name)

DESCRIPTION
	If the object with the specified `path_name' is loaded, its
	pointer is returned by this function.

	If the filename is given merely as the path to the object,
	e.g. "/std/coins" the master object is returned, but it is
	possible to find specific objects by giving the name complete
	with instance number, e.g. "/std/coins#123".

SEE ALSO
	present, find_living, find_player

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	find_player - find a named player

SYNOPSIS
	object find_player(string name)

DESCRIPTION
	This function finds and returns the player object with the given
	`name'. 

	The argument `name' must be given in lowercase for this function
	to work.

SEE ALSO
	find_living, find_object

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	first_inventory - get the first object in an inventory

SYNOPSIS
	object first_inventory(object ob)

DESCRIPTION
	Get the first object in the inventory of "ob".

SEE ALSO
	next_inventory, all_inventory, deep_inventory

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	function_exists - find out if a named function is defined in an
			  object and return the object filename.

SYNOPSIS
	string function_exists(string func, object ob)

DESCRIPTION
	This function searches for a named function `func' in the specified
	object `ob'. If it is found, the filename of that object is returned.

	The filename returned is not the same as the string returned by
	the function `file_name()', it does not have the instance number
	of the found object suffixed to it.

	If no argument `ob' is given, `this_object()' is used by default.

NOTA BENE
	It is the filename of the object that contains the function that
	is returned, not the composite object that might inherit the file
	that contains the function.

	E.g: if the function is in an object inherited by `ob' the
	     filename of the inherited object.

BUGS
	Does not find the function "heart_beat".

SEE ALSO
	inherit_list

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	get_dir - return an array of filenames in a directory

SYNOPSIS
	string *get_dir(string path)

DESCRIPTION
	This function returns the names of all files contained in the
	specified directory. If 'path' doesn't end with '/' either an
	empty array is returned if nothing with that name exists or
	an array containing the name if it exists. If 'path ends with
	'/' 0 is returned if 'path' isn't a directory else the contents
	of that directory as an array is returned. It is possible to
	use wildcards like:

	   get_dir("/a*")   Would return all files starting with
			    'a' in the muds root directory.

	The function is subject to the rules defined by the function
	`valid_read()'.

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	get_euid - Get the euid from an object

SYNOPSIS
	string get_euid(object o)

DESCRIPTION
	This function returns the euid from the object o. If no object is
	given default is this_object().

SEE ALSO
	get_uid, set_euid, export_uid

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	get_uid - Get the uid from an object.

SYNOPSIS
	string get_uid(object o)

DESCRIPTION
	This function returns the uid from the object o. If no object is
	given default is this_object().

SEE ALSO
	get_euid, set_euid, export_uid

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	implode - concatenate an array of strings

SYNOPSIS
	string implode(string *arr, string pad)

DESCRIPTION
	This function concatenates all strings contained in `arr' with
	the string `pad' inserted between them.

SEE ALSO
	explode, sprintf

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	inherit_list - return a list of all inherited objects of an object

SYNOPSIS
	string *inherit_list(object ob)

DESCRIPTION
	This function returns a list of all files that are inherited in
	the specified object `ob'.

	If no argument `ob' is given, `this_object()' is used by default.

NOTA BENE
	The filename of `ob' is included in the list

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	input_to - redirect keyboard input to a function

SYNOPSIS
	void input_to(string func, void|int noecho)

DESCRIPTION
	With this function it is possible to redirect the keyboard
	input from a player into a function.

	The function `func' is then called with the next string
	from the player that was this_player() at the call of
	input_to instead of interpreting it as a command. If
        `noecho' is given, the string is not echoed on the
	player's screen, good for passwords and such.

NOTA BENE
	This only works for interactive players. This will not work
	for an npc of any kind.

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	interactive - determine if an object is interactive or not

SYNOPSIS
	int interactive(object ob)

DESCRIPTION
	This function returns true if the specified object `ob' is an
	interactive player and false otherwise.
	If no argument is given, `this_object' is used by default.

SEE ALSO
	this_player

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	intp - determine if a variable is of type int

SYNOPSIS
	int intp(mixed testvar)

DESCRIPTION
	This function return 1 if `testvar' was of the type integer,
	and 0 otherwise.

SEE ALSO
	mappingp, stringp, pointerp, objectp

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	living - determine if an object is living

SYNOPSIS
	int living(object ob)

DESCRIPTION
	This function returns 1 if the specified object `ob' is
	living and 0 otherwise.
	
SEE ALSO
	enable_commands, disable_commands

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	log_file - log a message at the end of a file

SYNOPSIS
	void log_file(string file, string message)

	Append a message to a log file. All log files are in the directory
	/log. '/log/' is automatically prepended to the file name.

FRIENDLY ADVICE
	Use write_file and log in your own dir instead.

SEE ALSO
	write_file

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	lower_case - decapitalize a string

SYNOPSIS
	string lower_case(string str)

DESCRIPTION
	This function returns a string that is a copy of the argument
	string `str' but with all letters lower-case. 

SEE ALSO
	capitalize

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	m_delete - delete an index from a mapping

SYNSOPSIS
	mapping m_delete(mapping map, mixed index)

DESCRIPTION
	Remove the entry with index 'index' from mapping 'map', and
	return the changed mapping. If the mapping does not have an
	entry with index 'index', the first argument is returned.

SEE ALSO:
	mappingp, mkmapping, m_indices, m_values, m_sizeof

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	m_indices - return the indices from a mapping

SYNOPSIS
	mixed *m_indices(mapping map)

DESCRIPTION
	Return an array containing the indices of mapping 'map'.

SEE ALSO
	mappingp, mkmapping, m_values, m_delete, m_sizeof

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	m_sizeof - return the size of a mapping

SYNOPSIS
	int m_sizeof(mapping map)

DESCRIPTION
	Return the number of indices (or values) in mapping 'map'.

SEE ALSO
	mappingp, mkmapping, m_indices, m_values, m_delete

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	m_values - return the values from a mapping

SYNOPSIS
	mixed *m_values(mapping map)

DESCRIPTION
	Return an array with the values of mapping 'map'.

SEE ALSO
	mappingp, mkmapping, m_indices, m_delete, m_sizeof

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	map_array - map an array over a function

SYNOPSIS
	mixed *map_array(mixed *arr, string fun, object ob, mixed extra)

	Returns an array holding the items of 'arr' mapped through ob->fun().
	The function 'fun' in 'ob' is called for each element in 'arr' with
	that element as parameter. A second parameter 'extra' is sent in each
	 call if given. Principal function: 

	foreach (index) arr[index] = ob->fun(arr[index],extra);

	The value returned by ob->fun(arr[.index.], extra) replaces the
	existing  element in the array.

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	map_mapping - map a mapping over a function

SYNOPSIS
	mapping map_mapping(mapping m,string fun,object o,mixed extra)

DESCRIPTION
	Map_mapping calls the function fun with every value in the mapping
	m as argument and constructs a new mapping the the return values
	from the function as values. If the optional extra argument is
	present it will be sent to the function as well as a second argument.

SEE ALSO
	filter_mapping,map_array,filter_array

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	mappingp - check if a value is a mapping

SYNOPSIS
	int mappingp(mixed arg)

	Return 1 if the argument 'map' is a mapping, or 0 if it is not.

SEE ALSO
	intp, stringp, objectp, pointerp
	mkmapping, m_indices, m_values, m_delete, m_sizeof

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	member_array - find the position of an element in an array

SYNOPSIS
	int member_array(mixed element, mixed *array)

DESCRIPTION
	Gives the index in 'array' which is occupied with the value 'element'.
	If 'element' is not found or an integer is given instead of an array
	as second argument, -1 is returned.

	Searching works like the equality operator, ie integers and strings
	are compared for equality and arrays and mappings for identity.

	This means that integers and strings must have the same value to match,
	while arrays and mappings must be the exactly same.

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	mkdir - make a directory

SYNOPSIS
	int mkdir(string pathname)

DESCRIPTION
	Makes a directory with the pathname 'pathname'. If it returns 1 then
	the directory was successfully created.

	If it fails 0 is returned.

SEE ALSO
	rmdir

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	mkmapping - make a mapping of two arrays

SYNOPSIS
	mapping mkmapping(mixed *arr1, mixed *arr2)

	Return a mapping with indices from 'arr1' and values from 'arr2'.
	arr1[0] will index arr2[0], arr1[1] will index arr2[1], etc. If the
	arrays are of unequal size, the mapping will only contain as much
	elements as are in the smallest array.

FRIENDLY ADVICE
	Don't use any duplicate indexes if you don't know what will happen.

SEE ALSO
	mappingp, m_indices, m_values, m_delete, m_sizeof

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	move_object - move an object somewhere

SYNOPSIS
	void move_object(oject, object dest|string destfilename)

DESCRIPTION
	Moves the object 'obj' to the destination indicated
	by 'dest' or if the argument is a string 'destfilename' then 
	move_object tries to load the corresponding object and move 
	this_object to that destination.

	When an object moves from a destination all the commands it has
	defined in nearby objects using add_action through init, will be
	automatically removed. If this_object is a living object then
	all commands from nearby objects will be removed automatically.

	Upon entering the destination object each living object which becomes
	nearby will be set to this_player respectively and init will be run
	in the entering object. Thus letting it add its commands with 
	add_action to each nearby living object.

	If the entering object is itself living, then this_player will be
	set to the entering object and init will be called in each object
	already in the destination. Init will also be called in the
	destination object which is normally a room.

NOTA BENE
	In native-mode (most new muds are) move_object() may only move the
	object that calls it, ie. the first argument must be this_object().
	Therefor you use object->move(dest) instead, where move is an lfun
	that (hopefully) moves the object where you tell it to.

SEE ALSO
	add_action, enable_commands, disable_commands, this_player

CAVEAT
	As init is called from 'within' the move_object function, care must
	be taken that an infinit loop is not created by moving the wrong
	object within an init routine. If you are doubtful, never move
	an object in init.

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	next_inventory - get the next object in an inventory

SYNOPSIS
	object next_inventory(object ob)

DESCRIPTION
	Get next object in the same inventory as "ob".

NOTA BENE
	If the object 'ob' is moved by move_object(), then next_inventory()
	will return an object from the new inventory.

SEE ALSO
	first_inventory, all_inventory, deep_inventory

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	notify_fail - give a message to be printed if all commands failed

SYNOPSIS
	void notify_fail(string message)

DESCRIPTION
	With this function you can set a message that will be printed instead
	of the notorious 'What ?' when all commands fail. The message will be
	passed through process_string which allows you to decide the
	content of the string 'late' and also do other things in the
	function(s) called through process_string.

SEE ALSO
	process_string		

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	objectp - true if the value of a variable is an object

SYNOPSIS
	int objectp(mixed testvar)

DESCRIPTION
	This function return 1 if `testvar' was of the type object,
	and 0 otherwise.

SEE ALSO
	intp, stringp, pointerp, mappingp

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	parse_command - try to match a string with a given pattern

SYNOPSIS
	int parse_command(string command, object env|object *oblist,
			  string pattern, mixed arg, ...)

DESCRIPTION
  This is one of the most complex efun in LPmud to use. It takes
  some effort to learn and use, but when mastered, very powerfull constructs
  can be implemented.

  Basically parse_command() is a piffed up sscanf operating on word basis. It
  works similar to sscanf in that it takes a pattern and a variable set of
  destination arguments. It is together with sscanf the only efun to use
  pass by reference for other variables than arrays.

  To make the efun usefull it must have a certain support from the mudlib,
  there is a set of functions that it needs to call to get relevant
  information before it can parse in a sensible manner.

  In earlier versions it used the normal id() lfun in the LPC objects to
  find out if a given object was identified by a certain string. This was
  highly inefficient as it could result in hundreds or maybe thousands of
  calls when very long commands were parsed. 
  
  The new version relies on the LPC objects to give it three lists of 'names'.

       1 - The normal singular names.
       2 - The plural forms of the names.
       3 - The acknowledged adjectives of the object.

  These are fetched by calls to the functions:

       1 - string *parse_command_id_list();
       2 - string *parse_command_plural_id_list();
       3 - string *parse_command_adjectiv_id_list();

  The only really needed list is the first. If the second does not exist
  than the efun will try to create one from the singluar list. For 
  grammatical reasons it does not always succeed in a perfect way. This is
  especially true when the 'names' are not single words but phrases.

  The third is very nice to have because it makes constructs like
  'get all the little blue ones' possible.

  Apart from these functions that should exist in all objects, and which
  are therefore best put in /std/object.c there is also a set of functions
  needed in /secure/master.c These are not absolutely necessary but they
  give extra power to the efun.

  Basically these /secure/master.c lfuns are there to give default values
  for the lists of names fetched from each object.

  The names in these lists are applicable to any and all objects, the first
  three are identical to the lfun's in the objects:

       string *parse_command_id_list()
                - Would normally return: ({ "one", "thing" })

       string *parse_command_plural_id_list()
                - Would normally return: ({ "ones", "things", "them" })

       string *parse_command_adjectiv_id_list()
                - Would normally return ({ "iffish" })

  The last two are the default list of the prepositions and a single so called
  'all' word. 

       string *parse_command_prepos_list()
                 - Would normally return: ({ "in", "on", "under" })

       string parse_command_all_word()
                 - Would normally return: "all"


  The function returns 1 if 'command' is considered to have matched 'pattern'.
  The 'env' or 'oblist' parameter either holds an object or a list of objects.
  If it holds a single object than a list of objects are automatically
  created by adding the deep_inventory of the object, ie this is identical:

	parse_command(cmd, environment(), pattern, arg)

			and
	parse_command(cmd, ({ environment() }) + deep_inventory(environment()),
		      pattern, arg)

  'pattern' is a list of words and formats:

	Example string = " 'get' / 'take' %i "
	Syntax:
		'word' 		obligatory text
		[word]		optional text
		/		Alternative marker
		%o		Single item, object
		%l		Living objects
		%s		Any text
		%w              Any word
		%p		One of a list (prepositions)
		%i		Any items
		%d              Number 0- or tx(0-99)

    The 'arg' list is zero or more arguments. These are the result variables
    as in sscanf. Note that one variable is needed for each %_

	The return types of different %_ is:
		%o	Returns an object
		%s	Returns a string of words
		%w      Returns a string of one word
		%p	Can on entry hold a list of word in array
			or an empty variable
			Returns:
			   if empty variable: a string
			   if array: array[0]=matched word
		%i	Returns a special array on the form:
			[0] = (int) +(wanted) -(order) 0(all)
			[1..n] (object) Objectpointers	
		%l	Returns a special array on the form:
			[0] = (int) +(wanted) -(order) 0(all)
			[1..n] (object) Objectpointers
			                These are only living objects.
		%d      Returns a number

  The only types of % that uses all the loaded information from the objects
  are %i and %l. These are in fact identical except that %l filters out
  all nonliving objects from the list of objects before trying to parse.

  The return values of %i and %l is also the most complex. They return an
  array consisting of first a number and then all possible objects matching.
  As the typical string matched by %i/%l looks like: 'three red roses',
  'all nasty bugs' or 'second blue sword' the number indicates which 
  of these numerical constructs was matched:

         if numeral >0 then three, four, five etc were matched
         if numeral <0 then second, twentyfirst etc were matched
         if numeral==0 then 'all' or a generic plural form such as 'apples'
                            were matched.

  NOTE!
       The efun makes no semantic implication on the given numeral. It does
       not matter if 'all apples' or 'second apple' is given. A %i will
       return ALL possible objects matching in the array. It is up to the
       caller to decide what 'second' means in a given context.

       Also when given an object and not an explicit array of objects the
       entire recursive inventory of the given object is searched. It is up
       to the caller to decide which of the objects are actually visible
       meaning that 'second' might not at all mean the second object in
       the returned array of objects.
			

SEE ALSO
	sscanf, deep_inventory

CAVEAT
	Patterns of type: "%s %w %i"
	Might not work as one would expect. %w will always succeed so the arg
	corresponding to %s will always be empty.

BUGS
	Patterns of the type: 'word' and [word]
	The 'word' can not contain spaces. It must be a single word. 
	This is so because the pattern is exploded on " " (space) and a
	pattern element can therefore not contain spaces.

EXAMPLE:

	 if (parse_command("spray car",environment(this_player()),
        	              " 'spray' / 'paint' [paint] %i ",items))  
	 {	
	    /*
	      If the pattern matched then items holds a return array as
	      described under 'destargs' %i above.
     	    */
	 }

FRIENDLY ADVICE
	Don't use it.

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	pointerp - determine if the value of a variable is an array

SYNOPSIS
	int pointerp(mixed testvar)

DESCRIPTION
	This function return 1 if `testvar' was of the type pointer,
	and 0 otherwise.

SEE ALSO
	intp, stringp, mappingp, objectp

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	present - find a present object through its id() function

SYNOPSIS
	object present(object ob|string ob, object where)

DESCRIPTION
	This function returns the specified object `ob' if it is found
	in the inventory of the object `where'. The object `ob' can
	be given either as an actual object or as a string.
	If the object is not present, 0 is returned.

SEE ALSO
	find_object


:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	previous_object - give object that called current object

SYNOPSIS
	object previous_object()

DESCRIPTION
	This function returns the previous object that called a function
	in this object from the outside, ie with `call_other()'. 

	This include `call_other(this_object(), ...)' constructions. In 
	this case, the returned value will be `this_object()'.

CAVEAT
	If the function was called internally, the result is undefined.

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	process_string - give a string with replaced calldescriptions

SYNOPSIS
	string process_string(string combinestring)

DESCRIPTION
	Processes a string by replacing specific syntactic patterns with
	what is returned when the pattern is interpreted as a function
	call description.

	The syntactic patterns are on the form:

		   "@@function[:filename][|arg1|arg2....|argN]@@"

	This is interpreted as a call:

		filename->function(arg1, arg2, ....., argN)

  	Note that process_string does not recurse over returned
  	replacement values. If a function returns another syntactic
  	pattern, that description will not be replaced.

	All such occurrences in 'combinestring' is processed and replaced if
	the return value is a string. If the return value is not a string
	the the pattern will remain unreplaced.

  	Note that both object and arguments are marked optional with the
	brackets and that the brackets are not included in the actual pattern.

SEE ALSO
	process_value

CAVEAT
	This is usually used to support 'value by function call' in the mudlib.
	It is wise to set the effuserid of the object to 0 before using
	process_value as any function in any object can be called with almost
	any arguments.

EXAMPLE
	A string:	

	  "You are chased by @@query_the_name:/obj/monster#123@@ eastward."

   	is replaced by: 

	  "You are chased by the orc eastward."

        Assuming that query_the_name in monster#123 returns "the orc".

BUGS
	May or may not be implemented on many muds, if not implemented it
	returns the argument string.

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	query_host_name - give the hostname that the gamedriver is running on

SYNOPSIS
	string query_host_name()

DESCRIPTION
	Gives the name of the machine that the game is running on


:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	query_idle - give time since last command from a player

SYNOPSIS
	int query_idle(object player)

DESCRIPTION
	Returns the number of seconds that an interactive player has been
	idle, ie the time since the last command was issued.	

NOTA BENE
	This is only relevant to interactive players and are not implemented
	for npc's.


:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	query_ip_name - give the hostname from which a player is connected

SYNOPSIS
	string query_ip_name(void|object player)

DESCRIPTION
	Gives the host name of an interactive player, ie from which site
	the player is connecting to the game.
	
	The string returned is on the form: "milou.cd.chalmers.se"

SEE ALSO
	query_ip_number

BUGS
	This function demands an external process to be active on the
	machine running the gamedriver. If that process is not active
	query_ip_name will return the same as query_ip_number, always.

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	query_ip_number - give the ip number for a player

SYNOPSIS
	string query_ip_number(void |object player)

DESCRIPTION
	Gives the ip number of an interactive player, ie from which site
	the player is connecting to the game.
	
	The string returned is on the form: "129.16.48.2"

SEE ALSO
	query_ip_name

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	query_load_average - give a load average status message

SYNOPSIS
	string query_load_average()

DESCRIPTION
	Returns a string on the form:
		"0.68 cmds/s, 29.40 comp lines/s"

	This indicate the current workload of the gamedriver.

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	query_snoop - check what object is snooping a given object

SYNOPSIS
	object query_snoop(object snoopee)		
	
DESCRIPTION
	Gives objectpointer to the player that is snooping 'snoopee'. This
	function can only be executed by `/secure/master.c'

SEE ALSO
	snoop

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	query_verb - give the currently active verb

SYNOPSIS
	string query_verb()

DESCRIPTION
	Returns the currently issued verb. This is only relevant when an
	interactive player has issued a command. This function will
	the return the first word of that command, ie all text upto but
	not including the first space.

SEE ALSO
	add_action

CAVEAT
	When the verb have been added with the short verb flag, ie with
		add_action("function","verb",1)
	then all text up to first space is not equivalent to what triggered
	the command to be executed.

	You must currently remember which verb you did add_action() on
	until there exists a query_trigverb()
	
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	random - give a random value

SYNOPSIS
	int random(int limit, void|int seed)
	
DESCRIPTION
	Gives a random value between 0 and 'limit - 1'. Note that the 'limit'
	must be a positive integer.

	If the optional argument 'seed' is given then a specific random
	number will be given. random will always return the same value
	for a given limit and seed.

NOTA BENE
	The last paragraph is badly tested, please report any bugs found

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	read_bytes - read text from a given position in a file

SYNOPSIS
	string read_bytes(string filename, void|int fromchar, void|int numchar)

DESCRIPTION
	Gives the contents of the file 'filename'. If the optional arguments
	'fromchar' and 'tochar' is given then the function gives the contents
	from byte 'fromchar' and 'numcars' forward.

NOTA BENE
	There is a maximum limit to the number of bytes that can be read. This
	limit is defined when the gamedriver is compiled and is normally
	50Kbytes.

SEE ALSO
	write_file, read_file, write_bytes

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	read_file - read lines from a file, there is a maximum limit

SYNOPSIS
	string read_file(string filename, void|int startlin, void|int numlines)

DESCRIPTION
	Gives the contents of the file 'filename'. If the optional arguments
	'startlin' and 'num' is given then the function gives the textlines
	(separated by newlines), from the line 'startlin' to the line 
	'startlin'  + 'numlines'.

NOTA BENE
	There is a maximum limit to the number of bytes that can be read. This
	limit is defined when the gamedriver is compiled and is normally
	50Kbytes.

SEE ALSO
	write_file, read_bytes, write_bytes

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	regexp - match a regular expression

SYNOPSIS
	string *regexp(string *array, string pattern)

DESCRIPTION
	Regexp is short for regular expression and it is a general way of
	matching string used frequently in unix. The funcion regexp in lpc
	tries to match all strings in the array against a regular expression
	contained in the string exp and return all strings that matched.
	This function can sometimes replace a filter_array() operation and
	should do so as it is much faster. Here is a short summary of regexps.

	ONE CHAR MATCHES:
	'c'	Matches the character c.
	'.'	Matches any character.
	'[abc]'	Matches one of the characters a, b or c.
	'[^ab]' Matches any character _but_ a or b.


	MULTIPLE CHAR MATCHES: ( 'c' can be any of the one char matches. )
	'c*'	Matches a sequence of zero or more of the character c.
	'c+'	Matches a sequence of one or more of the character c.

	MISC
	'^'	Matches the beginning of the string.
	'$'	Matches the end of the string.

	More information can be found in the unix or emacs documentation.	
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	remove_call_out - remove a named, pending call_out for current object

SYNOPSIS
	int remove_call_out(string funcname)

DESCRIPTION
	Removes a pending call_out in the current object. Returns heartbeats
	left until the call out was going to take place.

SEE ALSO
	call_out, find_call_out, call_out_info

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	restore_object - load global variables in current object from file

SYNOPSIS
	int restore_object(string filename)

DESCRIPTION
	Loads all nonstatic global variables from a specifically formatted
	file given by 'filename'. The format of the file is:
	
		variable_name	variable_value

		intvar		number
		stringvar	"stringvalue"
		arrayvar	({ variable_values })
		mappingvar	([ index:value ])

SEE ALSO
	save_object

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	rm - remove a file

SYNOPSIS
	int rm(string filename)

DESCRIPTION
	Removes a file 'filename'. Returns 1 if successful.

SEE ALSO
	rmdir

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	rmdir - remove an empty directory

SYNOPSIS
	void rmdir(string pathname)

DESCRIPTION
	Removes an empty directory. Returns 1 on success, otherwise 0.

SEE ALSO
	mkdir, rm

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	save_object - save global variables in current object to a file

SYNOPSIS
	void save_object(string filename)

DESCRIPTION
	Saves all non static global variables of an object to a given file.
	All variables are saved except those currently of the type object.
	The filename gets a filetype ".o" appended and the format is:

		variable_name	variable_value

		intvar		number
		stringvar	"stringvalue"
		arrayvar	({ variable_values })
		mappingvar	([ index:value ])

SEE ALSO
	restore_object

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	say - proclaim a message to a room.

SYNOPSIS
	void say(string str)
	or
	void say(string str,object obj)

	If this_player() is set, send a message "str" to all players in
	the same object (room) else to all players in the same object
	(room) as this_object(). This function is also used by the "say"
	command. If second argument "obj" is specified, messages is sent
	to all except "obj".

FRIENDLY ADVICE
	Say uses a lot of magic, only use it if you don't know what you're
	doing or know exactly what you're doing, tell_room is often
	preferable.

SEE ALSO
	tell_room, tell_object, shout, tell_object, write

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME	
	set_bit - set a specific bit in a bitfield

SYNOPSIS
	string set_bit(string bitfield, int bitnum)

DESCRIPTION
	Sets a bit with the number 'bitnum' in a specifically coded string
	'bitfield'. The bitfield string is a string consisting of writable
	characters. Each character represents six bits.

	The 'bitfield' string is automatically extended to satisfy the setting
	of bits outside the current string size.

CAVEAT
	There is a maximum bitindex number which can be changed in config.h
	in the gamedriver source. This constant is normally 1200.

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	set_euid - Set the euid of this object.

SYNOPSIS
	int set_euid(string s)

DESCRIPTION
	Set_euid sets this objects euid to the string s and returns 1 if the
	operation was successful. The euid can be one of the following:

	o The objects uid.
	o An uid that is dependant on the filename. Usually retrived from
	  creator_file() in the masterobject.
	o zero

	The objects euid decides where the object may read and write in the
	mud and if it is set to zero the object isn't allowed to read or
	write anywhere in the mudlib. Not even call functions in objects
	that must be loaded. The euid and uid of the object is always set
	to something else than zero when loaded.

SEE ALSO
	get_uid, get_euid, export_uid

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	set_heart_beat - turn the heart beat calling on/off in current object

SYNOPSIS
	void set_heart_beat(int onflag)

DESCRIPTION
	This function turns on and off automatic calls every 2 seconds to
	the lfun heart_beat. If 'onflag' is 0 then calls is turned off, 
	otherwise calling is turned on. 

NOTA BENE
	heart_beats are costly. Use them only if neccessary. Especially
	do not use them for 'down counters' such as counting down the
	life time of a torch, use call_out for such purposes.

SEE ALSO
	call_out

CAVEAT
	If there is a runtime error in your heart_beat routine calling
	of the heart_beat will be automatically turned off.

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	set_light - make an object shine like a torch

SYNOPSIS
	int set_light(int n)

	An object is by default dark. It can be set to not dark by calling
	set_light(1). The environment will the also get this light.
	The returned value is the total number of lights in this room.

	Note that the value of the argument is added to the light of the
	current argument !

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	set_living_name - set the searchable name for a living object

SYNOPSIS
	void set_living_name(string name)

DESCRIPTION
	Sets a specific searchable name for a living object, ie an object
	that has done enable_commands. By doing so the object can be found
	by the function find_living. 

NOTA BENE
	This is normally used to allow finding of an npc globally in the
	game.

SEE ALSO
	find_living, find_player, enable_commands

CAVEAT
	If there is two living objects with the same name then only one
	of them will ever be found by find_living, undefined which one.

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	shadow - let the current object shadow another object or find a shadow

SYNOPSIS
	object shadow(object shadowee, int setshadow)

DESCRIPTION
	If 'setshadow' is 1 set the current object to shadow 'shadowee' if
	'shadowee' hasn't denied shadowing.
	If setshadow is 0 return the object currently shadowing 'shadowee'.

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	shout - exclaim a message to all players

SYNOPSIS
	void shout(string str)

	Send a string "str" to all players. This function is also used by
	the "shout" command.

SEE ALSO
	write, tell_object, say

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	shutdown - shut down the gamedriver

SYNOPSIS
	void shutdown()

DESCRIPTION
	This function should only be used in emergencies. Normally
	Armageddon is used to reboot the game.

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	sizeof - give the size of an array

SYNOPSIS
	int sizeof(mixed *array)

DESCRIPTION
	return the size in elements of a given array

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	slice_array - cut out a piece from an array

SYNOPSIS
	mixed *slice_array(mixed *arr,int from,int to)

DESCRIPTION
	Returns an array that is a slice of the array 'arr' from the
	index 'from' to the index 'to'. Indices are numbered 0-
	If indices are outside the limits of 'arr' an empty array is
	returned. Note also that you can use the operators '+' and '-'
	on arrays.

NOTA BENE
	This function is obsolete, use arr[from,to] instead.

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	snoop - let one player snoop another

SYNOPSIS
	object snoop(void|object snooper, object snoopee)

DESCRIPTION

NOTA BENE

SEE ALSO

CAVEAT

BUGS

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	sort_array - sort an array through a specific sort function

SYNOPSIS
	mixed *sort_array(mixed *array, string sortfunc, string|object sortob)

DESCRIPTION
	Sort array calls 'sortfunc' in 'sortob' with two elements from the
	'array' as args at a time and the function returns true if arg1 is
	bigger than arg2 to sort lower to higher in the resulting array
	and the other way around.

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

An implementation of (s)printf() for LPC, with quite a few
extensions (note that as no floating point exists, some parameters
have slightly different meaning or restrictions to "standard"
(s)printf.)  Implemented by Lynscar (Sean A Reith).

This version supports the following as modifiers:
 " "   pad positive integers with a space.
 "+"   pad positive integers with a plus sign.
 "-"   left adjusted within field size.
       NB: std (s)printf() defaults to right justification, which is
           unnatural in the context of a mainly string based language
           but has been retained for "compatability" ;)
 "|"   centered within field size.
 "="   column mode if strings are greater than field size.  this is only
       meaningful with strings, all other types ignore
       this.  columns are auto-magically word wrapped.
 "#"   table mode, print a list of '\n' separated 'words' in a
       table within the field size.  only meaningful with strings.
  n    specifies the field size, a '*' specifies to use the corresponding
       arg as the field size.  if n is prepended with a zero, then is padded
       zeros, else it is padded with spaces (or specified pad string).
 "."n  presision of n, simple strings truncate after this (if presision is
       greater than field size, then field size = presision), tables use
       presision to specify the number of columns (if presision not specified
       then tables calculate a best fit), all other types ignore this.
 ":"n  n specifies the fs _and_ the presision, if n is prepended by a zero
       then it is padded with zeros instead of spaces.
 "@"   the argument is an array.  the corresponding format_info (minus the
       "@") is applyed to each element of the array.
 "'X'" The char(s) between the single-quotes are used to pad to field
       size (defaults to space) (if both a zero (in front of field
       size) and a pad string are specified, the one specified second
       overrules).  NOTE:  to include "'" in the pad string, you must
       use "\\'" (as the backslash has to be escaped past the
       interpreter), similarly, to include "\" requires "\\\\".
The following are the possible type specifiers.
 "%"   in which case no arguments are interpreted, and a "%" is inserted, and
       all modifiers are ignored.
 "O"   the argument is an LPC datatype.
 "s"   the argument is a string.
 "d"   the integer arg is printed in decimal.
 "i"   as d.
 "c"   the integer arg is to be printed as a character.
 "o"   the integer arg is printed in octal.
 "x"   the integer arg is printed in hex.
 "X"   the integer arg is printed in hex (in capitals).

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	sscanf - Parse a string with a given format

SYNOPSIS
	int sscanf(string str, string fmt, mixed var1, mixed var2 ...)

DESCRIPTION
	Parse string `str' with the format `fmt' and return matched
	pieces in the given variables. %s and %d in the format string
        refers to a string and a number respectively. The variables
        must be defined earlier as `strings' for those connected to a
	%s and `int' for those connected to a %d.

EXAMPLE
	sscanf("good morning", "%s %s", var1, var2) == 2
		var1 is set to "good" and var2 to "morning"
	sscanf("10 hi", "%d ", var) == 1
		var is set to 10
	sscanf("from bag", "%s %d", var1, var) == 1
		var1 is set to from and var is unchanged

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	stringp - true if a given variables value is currently a string

SYNOPSIS
	int stringp(mixed testvar)

DESCRIPTION
	Returns 1 if the value of 'testvar' is currently of the type string.

SEE ALSO
	intp, pointerp, mappingp, objectp

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	strlen - give the length of a string

SYNOPSIS
	int strlen(string str)

DESCRIPTION
	Gives the length of a string in number of characters.

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	tail - print the last lines of a file

SYNOPSIS
	void tail(string filename)

DESCRIPTION
	Writes the approx 1080 last bytes of the file 'filename' to the
	current player, ie this_player	

	It ensures that it starts writing on a new line.

SEE ALSO
	write, cat

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	tell_object - send message to a specific living object

SYNOPSIS
	void tell_object(object liveob, string message)

DESCRIPTION
	Sends a message directly to the living object 'liveob'. If 'liveob'
	is an interactive object then the message is written directly to
	the socket. If 'liveob' is an npc then the lfun 'catch_tell' will
	be called with 'message' as parameter.

NOTA BENE
	tell_object as well as write sends unprocessed messages to the
	recieving object. If the mudlib uses processing on messages
	then calling this function will send a raw message.

SEE ALSO
	write

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	tell_room - give a message to all objects in a room

SYNOPSIS
	void tell_room(object ob, string str)
	or
	void tell_room(object ob, string str, object avoid)

	Send the message `str' to object all objects in `ob'. 'Ob' can
	either be an object or the filename to an object. The optional
	third argument is an array of objects not to hear `str'.

SEE ALSO 
	write, shout, say, tell_object

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	test_bit - test a given bit in a bitfield

SYNOPSIS
	int test_bit(string bitfield, int bitnum)

DESCRIPTION
	Tests a bit with the number 'bitnum' in a specifically coded string
	'bitfield'. The bitfield string is a string consisting of writable
	characters. Each character represents six bits.

	test_bit returns 1 if the bit is set, otherwise 0.

CAVEAT
	There is a maximum bitindex number which can be changed in config.h
	in the gamedriver source. This constant is normally 1200.

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	this_object - give the object pointer to the executing object

SYNOPSIS
	object this_object()

DESCRIPTION
	Gives the object pointer to the object that is currently executing.

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	this_player - give the current player

SYNOPSIS
	object this_player()

DESCRIPTION
	Gives the currently active player. This can be both an interactive
	player and an npc in the game. this_player is the object that gets
	all writes and is affected by add_action.

SEE ALSO
	write, add_action, move_object

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	throw - cause an execution to terminate with an error

SYNOPSIS
	void throw(mixed errdata)

DESCRIPTION
	Terminates the execution with an error message. If a prior catch is
	active then execution will resume after the catch statement. In that
	case `errdata' will be returned by the catch statement. Anything can
	be thrown except 0 which is the indicator of no error.

BUGS
	Don't throw a zero, most muds will crash.

SEE ALSO
	catch

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	time - give the current time

SYNOPSIS
	int time()

DESCRIPTION
	Gives the current time in number of seconds passed since January 1970,
	something. 

SEE ALSO
	ctime

BUGS
	The actual time is only updated in the gamedriver each heartbeat.
	This means that time makes 'leaps' every heartbeat.

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	trace - let a player get trace information 

SYNOPSIS
	int trace(int bitflags)

DESCRIPTION
	Sets the trace level for the current player. As long as this player
	is current the gamedriver will write trace information. This can
	be very excessive information. The bitcodes are as follows:

		  1 - Trace all calls
		  2 - Trace all call_others
		  4 - Trace all returns
		  8 - Write arguments when tracing call / call_other
		 16 - Trace stackcode execution (VERY MUCH INFORMATION)
		 32 - Trace code in run in heartbeat
		 64 - Trace all applys
		128 - Write objectnames when tracing

NOTA BENE
	This can most often only be used by some high level wizards in a mud
	for reasons of efficiency. This is implemented through the master
	object

SEE ALSO
	traceprefix

BUGS
	When very much information is printed it most often gets discarded
	because the socket can't keep up.

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	traceprefix - set the prefix for objects printed during a trace

SYNOPSIS
	string traceprefix(int|string prefix)

DESCRIPTION
	Sets the filenameprefix for objects that should be printed in trace.

NOTA BENE
	Use this with caution as it is severly punishing on execution speed.

SEE ALSO
	trace

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	unique_array - Sort an array into arrays of unique groups

SYNOPSIS
	mixed *unique_array(int|mixed *array, string uniqfunc, void|mixed del)

DESCRIPTION
	Gives an array of arrays of nonunique objects. The function 'uniqfunc'
	is called on each of the objects in the array. The return values are
	used to group the objects into a number of arrays. For each object
	in such a subarray 'uniqfunc' returned the same value.

 	Then an array on the below form are returned:
   
	   ({
	   ({Same1:1, Same1:2, Same1:3, .... Same1:N }),
	   ({Same2:1, Same2:2, Same2:3, .... Same2:N }),
	   ({Same3:1, Same3:2, Same3:3, .... Same3:N }),
	   ....
	   ....
	   ({SameM:1, SameM:2, SameM:3, .... SameM:N }),
	   })
   
CAVEAT
	All elements of the array that is not objectpointers are ignored.

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	users - give an array of the current players

SYNOPSIS
	object *users()

DESCRIPTION
	Gives an array of objectpointers to the currently interactive
	objects. This is most often the playerobjects, unless exec() has
	been run to swap a players interactivity into another object.	

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	version - give the version of the gamedriver

SYNOPSIS
	string version()

DESCRIPTION
	Simply returns a string indicating the gamedriver version, this is
	typically on the form: "3.1.2-Lxx", where xx is the current local-level.

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	wizlist - print some statistics on wizards

SYNOPSIS
	void wizlist(void|string wizname)

DESCRIPTION
	Print some statistics on wizards and objects created by them.
	If no argument is given the name of this_player() is used.
	This efun print some info in columns:

	first:   commands executed that where defined by wiz
	second:  percent of total commands
	third:   where on the list wiz is
	fourth:  evaluated nodes in wiz's objects
	fifth:   heart_beats in wiz's monsters
	sixth:   given/taken xp/money by this wizard
	seventh: nodes in arrays used by wiz's objects

	If the name isn't among the 15 first on the list that person,
	the two nearest after and the two nearest after is printed
	The top fifteen is printed in any case.

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	write - write data (normally text) to the current player

SYNOPSIS
	void write(mixed data)

DESCRIPTION
	Writes data to the current 'command giver', ie the object returned by
	this_player. Data is normally text. If this_player() is 0 data is
	written to the muds system log. Make sire you don't use this efun
	without a this_player(), the logfile grows fast enough anyway.

SEE ALSO
	tell_object, this_player

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	write_bytes - write chars in a given position in a file

SYNOPSIS
	int write_bytes(string filename, int position, string text)

DESCRIPTION
	Write the string 'text' at a given position in a file. If the position
	is negative it is counted backwards from the end of the file.

	If the position is outside the file the nothing is written.

	If the 'text' extends outside the file then the file is extended.

NOTA BENE
	Observe that you overwrite existing data in the file. Not like
	write_file where you only append data at the end.

SEE ALSO
	read_bytes, write_file, read_file

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	write_file - append text to a file

SYNOPSIS
	int write_file(string filename, string text)

DESCRIPTION
	This function appends a given string 'text' to the file 'filename'.

NOTA BENE
	If you need to rewrite a file, that is not append but write from
	start, then you have to first remove the file with rm.

SEE ALSO
	read_file, read_bytes, write_bytes, rm, rmdir

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

