
   ##### Lfuns, the mechanics that makes the mud go around #####

Lfuns are functions defined in object, they can both be called from inside
the object and from the outside. The functions described in this chapter
are used to check and control objects so you know what you may and may
not do with it, the other way around it is equally important that you use 
these functions in your own objects so that others knows what they may do
with your object.

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	add_money - add/subtract money

SYNOPSIS
	void ob->add_money(int m)

DESCRIPTION
	Objects that can pick up the special "money" object, should have this
	function. It will be called with the amount of gold coins. Normally
	you call query_money before using this function.

DEFINED BY
	monsters, livings, players

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	add_weight - add/subtract weight to an object and return success

SYNOPSIS
	int ob->add_weight(int w)

DESCRIPTION
	An object that can contain other objects must define this function.
	It is called with the extra weight of the new object. If this is ok,
	then it has to increment the local weight count, and return true.
	Otherwise, return false, and the new object can not be entered into
	this object.

DEFINED BY
	monsters, livings, players, bags, containers

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	attacked_by - call to attack an object

SYNOPSIS
	void ob->attacked_by(object ob)

DESCRIPTION
	This routine is called by the object attacking this object.
	Define it if this object wants to know who the attacker is.

DEFINED BY
	monsters, livings, players

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	can_put_and_get - can the object contain objects ?

SYNOPSIS
	int ob->can_put_and_get(string str)

DESCRIPTION
	Define this function if you want to make it possible to put something
	into current object.

	Return true if ok, otherwise 0. That means that default is that it 
	is not possible to put something into an object.

	When a player does "look at xxx", then "xxx" will be sent to
	can_put_and_get(), to test if the player can look at the inventory.
	Otherwise, 'str' will be 0.

	This is trivial for containers. If the are open, they return 1.

	If id() accepts other things, like "lock" (in a chest for example).
	Then "lock" will be sent to can_put_and_get(), which should return 
	false, because the lock has no inventory (of course).

DEFINED BY
	anything that can hold objects

SEE ALSO
	id, long

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	catch_tell - recive messages sent to the object

SYNOPSIS
	void ob->catch_tell(string str)

DESCTIPTION
	When tell_object() sends a message to a noninteractive player,
	it will get to the function catch_tell(string). This will enable
	communications between NPC's and from a player to an NPC.

	The only exception is shout, which the monster won't hear. The
	monster  must be living, that is, call enable_commands().

	When ob is an NPCs tell_object(ob,str) is equal to
	ob->catch_tell(str);

DEFINED BY
	NPCs

SEE ALSO
	the efun enable_commands

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	drop - can the object be dropped ?

SYNOPSIS
	int ob->drop(int silently)

DESCRIPTION
	This function must be defined by all objects that want to control
	when they can be dropped. if 'silently' is true, then don't write
	any messages.

	drop() should return 1 to prevent dropping. This is the opposite
	of the get() function. That is because if drop() is not defined,
	it will always be possible to drop an object.

	If the object self-destructs when drop() is called, be sure to
	return 1, as the destructed item surely not can be dropped.

	Similarly, if drop() is called in another object, always test
	if the object did self-destruct, as the object variable will
	turn to 0.

DEFINED BY
	objects in that can be carried

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	exit - called when living objects leave the room

SYNOPSIS
	void exit(object ob)

DESCRIPTION
	This function is called in rooms everytime a living object 'ob' leaves.
	The function this_player() will return a random value, don't use
	it at this point.

NOTA BENE
	Be careful, errors in this functions give horrible results.
	Never call this function in another object, it should only be called
	from the driver.

DEFINED BY
	some rooms

SE ALSO
	init

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	extra_look - give players a special look

SYNOPSIS
	string ob->extra_look()

DESCRIPTION
	If this function returns a string, and the object is carried by a
	player, then the string returned by this function will be printed
	after the character data, but before the list of what the character
	is carrying.

	This can be used to introduce curses for players, that gives some
	visual result.

SEE ALSO
	short, query_auto_load

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	get - is the object gettable ?

SYNOPSIS
	int ob->get(string str)

DESCRIPTION
	If an object wants control over when it is possible to pick it up,
	then it must define get(), and return 1 if ok to pick up.

	The "str" is comes from "get str" from the player command.
	Normally id() has been called before this to identify the object.

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	heal_self - heal some hp and sp

SYNOPSIS
	void ob->heal_self(int h)

DESCRIPTION
	This routine is called when the object is allowed to heal by 
	'h' points. Of course, this is only interesting for living objects.

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	heart_beat - the driving force of an npc or player

SYNOPSIS
	void heart_beat()

DESCRIPTION
	This function will be called automatically every 2 seconds.
	 The start and stop of heart beat is controlled by the efun
	set_heart_beat().

	Be careful not to have objects with heart beat running all the time,
	it uses a lot of resources.

	If there is an error in the heart beat routine, the heart beat will
	be turned off automaticly. Though it can be started again with
	set_heart_beat() this is not recomended.

	The function this_player() will return this object, but only if it
	is living. Otherwise, this_player() will return 0.

NOTA BENE
	Never call this in another object, it should only be called from
	the driver.

SEE ALSO
	 the efun set_heart_beat, the efun call_out
	 the efun enable_commands

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	hit_player - try to damage a player or npc

SYNOPSIS
	int ob->hit_player(int dam)

DESCRIPTION
	If the object can fight and get hit by other objects, it must have
	a hit_player function. The "dam" is the maximum damage the other
	object wants to give. Return the actual damage.

	This function should also tell other players in the current room
	that someone got hit (using say()).

	See example in player.c

DEFINED BY
	players, npcs

SEE ALSO
	efuns: enable_command, living
	attacked_by

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	id - does the string identify the object?

SYNOPSIS
	int ob->id(string str)

	This function is used to identify an object. If it identifies with
	the string "str", then return 1, else 0.

DEFINED BY
	almost everything, invisible objects may be excepted

SEE ALSO
	long, can_put_and_get

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	init - called when a player enters the room

SYNOPSIS
	void init()

DESCRIPTION
	This function is called everytime a living objects can "see" the
	object. It is good to the set up of add_action() and add_verb()
	in the init() routine.

NOTA BENE
	Never call init() in another object this function should only be
	called by the driver.

DEFINED BY
	rooms, objects, tools, weapons, armours, etc.

SEE ALSO
	exit

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	long - write the long descripton of the room/object

SYNOPSIS
	void ob->long(string str)

DESCRIPTION
	This function prints out a elaborate description of it self.
	Minimum	requirement is to print the value of short().

	If there is an argument, then print description of that argument.
	An argument can only be passed to long() if id() has agreed. For
	example, a room with a door can allow id("door") to be true. Then
	it is possible to do "look at door". The long command will then
	have to print info about the door.

	To prevent the listing of all things in this room when
	"look at door", let can_put_and_get("door") return false.

SEE ALSO
	short, can_put_and_get, id

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	present_living - Find a living

SYNOPSIS
	object ob->present_living()

DESCRIPTION
	Returns the first 'living' object of the room, or 0 if none.
	Works only in rooms.

DEFINED BY
	rooms

SEE ALSO
	present_player.

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	present_player - find a player

SYNOPSIS
	object ob->present_player()

DESCRIPTION
	Returns the first playerobject in the room's inventory, or 0 if none.
	It's only avaialable in rooms.

DEFINED BY
	rooms

SEE ALSO
	present_living

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	query_attack - return the attacker

SYNOPSIS
	object ob->query_attack()

DESCRIPTION
	All objects that can come under attack should define this function.
	It shall return the attacking object or 0.

DEFINED BY
	players, npcs

SEE ALSO
	hit_player, attack_object, attacked_by

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	query_auto_load - get the auto load string

SYNOPSIS
	string ob->query_auto_load()
	
DESCRIPTION
	An object that wants to be loaded automatically when the player
	logs in, should define this function. There are some important rules
	about how to use it:

	1. It must not have any weight.

	2. It must prevent the player from dropping it.

	3. query_auto_load() must return a string that is:    file:arg
	   The 'file' is the definition that will be cloned. The 'arg' is a
	    string that will be sent as argument to the function
	    'init_arg()'. The 'arg' can be an empty string.

	4. It must not be an actively usable item, like weapon or armour.

	5. It must not help the player in combats.

	The idea with this feature is that a player can get a curse or
	membership, that will stick with him, even if he quits. The idea
	is not that the player will save his weapons etc.

	Look /obj/tools/fizban.staff for an example.

SEE ALSO
	extra_look, init_arg

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	query_gender_string - return a what the objects gender is called

SYNOPSIS
	string ob->query_gender_string()

DESCRIPTION
	This function is defined by living monsters and players. It will
	return either "neuter", "male" or "female".

	There are other such query_functions, but they are not guaranteed to
	remain, so only use this one.

SEE ALSO
	query_npc

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	query_info - return hidden info

SYNOPSIS
	string ob->query_info()

DESCRIPTION
	Declare this function if the object has some information that is
	hidden. A scroll of identify would call query_info() to find out.

	The standard objects weapon.c, armour.c and treasure.c all have a
	function set_info(), to enable setting an information string.

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	query_level - return the level of an object

SYNOPSIS
	int ob->query_level()

DESCRIPTION
	All mobile (living) objects must define this. The lowest level is 1.
	An apprentice wizard have level 20, and a full wizard with a castle
	have level 21.

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	query_money - return how much money an object has

SYNOPSIS
	int ob->query_money()

DESCRIPTION
	Objects that can carry money, should define this function to return
	the amount of gold coins.

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	query_name - return the name of the object

SYNOPSIS
	string ob->query_name()

DESCRIPTION
	All living objects, weapons and armour must return the name of itself.

SEE ALSO
	short

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	query_npc - it the object an npc

SYNOPSIS
	int query_npc()

DESCRIPTION
	This function is defined by all living objects and monsters. It
	will return 1 for monsters, and 0 for players. NPC = Non Player
	Character.

SEE ALSO
	query_gender_string

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	query_value - return the value of an object

SYNOPSIS
	int ob->query_value()

DESCRIPTION
	Return the value of this object. If it is not possible to sell this
	object, then the value 0 should be returned.
	One gold coin corresponds to one experience point, as a reference.


:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	query_weight - return the weight of the object

SUNOPSIS
	int ob->query_weight()

DESCRIPTION
	This function is called to query the weight of this object.
	A design choise TAKEN, is that objects inside another objects, does
	not change the weight of that object.

	This makes it possible for a player to carry more if he puts it into
	a bag or something.

	Note that objects doesn't have a size, only weight.

NOTA BENE
	Never ever change the weight of an object whithout making certain
	that the environment is updated correctly.

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	reset - reset an object

SYNOPSIS
	void reset()

DESCRIPTION
	Reset is called everytime the object is resetted. If a room creates
	things in reset() or create() it should check that these objects
	has moved out before creating new.

	Every object will repetedly get resetted by a daemon. The game
	wouldn't be fun if no challenges remained.

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	short - return a one-line description of an object

SYNOPSIS
	string ob->short()

	All objects must have a short() function. This function returns
	a short message describing what it is. Invisible object will return
	the value 0.

SEE ALSO
	long

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	show_stats - print vital statisics

SYNOPSIS	
	void ob->show_stats()

DESCRIPTION
	Living objects should define this function. It should print
	all important stats about the object.

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	stop_fight - stop the object from being naughty 

SYNOPSIS
	void ob->stop_fight()

	Defined by all monster and player objects. If you call this function,
	that player or monster will stop fighting. If you want to stop a fight,
	you have to call stop_fight() in both opponents.

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	stop_wielding - make an npc unwield hes/her/her weapon

SYNOPSIS
	void ob->stop_wielding()

	Objects able to wield weapons, should have this function. It is
	called by the weapon when it is not possible to continue wielding
	the weapon.

	It should adjust the weapon class of the current object.

NOTA BENE
	Remember to call this if you move an object from a players inventory.

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

