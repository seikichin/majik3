:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	int - 32 bit integer

SYNOPSIS
	<number>
	or
	0x<hex number>
	or
	'<character>'

DESCRIPTION
	Int is a 32 bit integer that basicly works just like it's C
	equivialent. It is signed can can hold numbers between -2100000000
	and 2100000000. The last form is equivialent to the ascii value of
	that char.

OPERATIONS
	!a	logical not
	a && b	logical and
	a || b  logical or
	~a	binary not
	++a a++	pre/post-increment
	--a a--	pre/post-decrement
	a+b	addition
	a-b	subtraction
	a*b	multiplication
	a/b	division
	a%b	modulo
	a&b	binary and
	a|b	binary or
	a^b	binary xor

EFUNS
	intp

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	object - a pointer to another object

SYNOPSIS
	There is no way to write constant object pointers.

DESCRIPTION
	This type lets you manipulate and keep track of objects.
	There are no real operation for objects except comparisment.

EFUNS
	this_object, find_object, objectp	

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	string - dynamic string

SYNIOPSIS
	"<text>"

DESCRIPTION
	String is a dynamicly allocated string type. Unlike C lpc does not
	treat a string as an array of chars, and there is no operation to
	set an character within a string. The index operation retuns an
	int, not a char as there is no such type in lpc. The range operation
	returns a string that begins on b and ends on c. Note that the first
	character in the string has index 0.

NOTA BENE
	Arrays are shared. If you change an array any copies of it will change
	as well.

OPERATIONS
	!a	return one as strings are true
	a+b	concatenation
	a[b]	index
	a[b..c]	range

EFUNS
	strlen, lower_case, capitalize, pointerp
	

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	array - dynamic array

SYNOPSIS
	({<item>,<item>,<item>,......})

DESCRIPTION
	Arrays in lpc are dynamic, and also dynamicly typed. That means that
	the same array can contain any other type and in any order you please.
	Items in arrays can be any lpc type you please, even arrays. An array
	can not be larger than 1000 items. In arrays items can be assigned
	like arr[i]=value; as opposed to strings where this is not possible.
	When you declare a type you never write 'array' but use a * after
	another type like 'string *' or 'mixed *' to specify that it is an
	array of strings or mixed respectivly.

OPERATIONS
	!a	return one as arrays are true
	a+b	concatenation
	a[b]	index
	a[b..c]	range
	a-b	subtraction
	a&b	intersection

EFUNS
	sizeof, map_array, filter_array

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

NAME
	mapping - dynamic asociated array

SYNOPSIS
	([<index>:<value>,<index>:<value>,.....])

DESCRIPTION
	Mappings works similar to arrays, but the indexes can be chosen to
	anything you like. Note that mappings are sorted when created so the
	oreder of the values will always change. When indexing a mapping
	the index can be anything like map["hello"] is valid. Also note
	that if you assign something to an index that is present in the
	mapping it will be added.

NOTA BENE
	Mappings are not standard lpc, but present in many new drivers.

OPERATIONS
	!a	return one as arrays are true
	a+b	concatenation
	a[b]	index

EFUNS
	m_sizeof, m_values, m_indices, mkmapping, map_mapping, filter_mapping
	

:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
