/* Battlestatter */
#include <battle.h>

int *armour_update_request(object *worn, int total_slots, 
				int naked_defense, int naked_fatique, 
			   int naked_offense, int naked_speed, int naked_damage);
int *weapon_update_request(object *wielded);
int calculate_armour_defense(object *worn, int total_slots, int naked_defense);
int calculate_armour_fatique(object *worn, int total_slots, int naked_fatique);
int calculate_armour_offense(object *worn, int total_slots, int naked_offense);
int calculate_armour_speed(object *worn, int total_slots, int naked_speed);
int calculate_armour_damage(object *worn, int total_slots, int naked_speed);

int calculate_weapon_defense(object *wielded);
int calculate_weapon_fatique(object *wielded);
int calculate_weapon_protection(object *wielded);

int *armour_update_request(object *worn, int total_slots, int nd, int nf, int no, int ns, int ndm)
{
  int spd, off, def, fat, dmg;
  spd=calculate_armour_speed(worn, total_slots, ns);
  off=calculate_armour_offense(worn, total_slots, no);
  def=calculate_armour_defense(worn, total_slots, nd);
  fat=calculate_armour_fatique(worn, total_slots, nf);
  dmg=calculate_armour_damage(worn, total_slots, ndm);
  return ({def, off, spd, fat, dmg});
}

static int calculate_armour_damage(object *worn, int total_slots, int naked_damage)
{
  int sum, tmp, total, i;
  object ob;
  foreach (ob in worn)
    {
      tmp=worn[i]->query_slot_number();
      sum=sum+worn[i]->query_slot_number();
      total+=tmp;
    }
  sum=sum+naked_damage*(total_slots-total);
  return (int)(sum/total_slots);
}

static int calculate_armour_defense(object *worn, int total_slots, int naked_defense)
{
  int sum, tmp, total, i;
  object ob;
  foreach (ob in worn)
    {
      tmp=worn[i]->query_slot_number();
      sum=sum+worn[i]->query_defense()*tmp;
      total+=tmp;
    }
  sum=sum+naked_defense*(total_slots-total);
  return (int)(sum/total_slots);
}

static int calculate_armour_fatique(object *worn, int total_slots, int naked_fatique)
{
  int sum, tmp, total, i;
  object ob;
  foreach (ob in worn)
    {
      tmp=worn[i]->query_slot_number();
      sum=sum+worn[i]->query_fatique()*tmp;
      total+=tmp;
    }
  sum=sum+naked_fatique*(total_slots-total);
  return (int)(sum/total_slots);
}

static int calculate_armour_offense(object *worn, int total_slots, int naked_offense)
{
  int sum, tmp, total, i;
  object ob;
  foreach (ob in worn)
    {
      tmp=worn[i]->query_slot_number();
      sum=sum+worn[i]->query_offense()*tmp;
      total+=tmp;
    }
  sum=sum+naked_offense*(total_slots-total);
  return (int)(sum/total_slots);
}

static int calculate_armour_speed(object *worn, int total_slots, int naked_speed)
{
  int sum, tmp, total, i;
  object ob;
  foreach (ob in worn)
    {
      tmp=worn[i]->query_slot_number();
      sum=sum+worn[i]->query_speed()*tmp;
      total+=tmp;
    }
  sum=sum+naked_speed*(total_slots-total);
  return (int)(sum/total_slots);
}

int *weapon_update_request(object *wielded)
{
  int def, fat, pro;
  def=calculate_weapon_defense(wielded);
  fat=calculate_weapon_fatique(wielded);
  pro=calculate_weapon_protection(wielded);
  return ({def, fat, pro});
}

static int calculate_weapon_defense(object *wielded)
{
  int weapon_defense, i, sum, limbs, total;
  object ob;
  foreach (ob in wielded)
    {
      limbs=ob->query_wield_limbs();
      sum+=ob->query_defense()*limbs;
      total+=limbs;
    }
  if(!total)
    return 0;
  return (int)(sum/total);
}

static int calculate_weapon_fatique(object *wielded)
{
  int i, sum, limbs, total;
  object ob;
  foreach (ob in wielded)
    {
      limbs=ob->query_wield_limbs();
      sum+=ob->query_defense()*limbs;
      total+=limbs;
    }
  if(!total)
    return 0;
  return (int)(sum/total);
}

static int calculate_weapon_protection(object *wielded)
{
  int i, sum, limbs, total;
  object ob;
  foreach (ob in wielded)
    {
      limbs=ob->query_wield_limbs();
      sum+=ob->query_protection()*limbs;
      total+=limbs;
    }
  if(!total)
    return 0;
  return (int)(sum/total);
}

string query_default_maneuver(string type)
{
  switch (type)
    {
    case "martial_arts":
    case "martial_arts_and_martial_arts":
      return "brawlers_punch";
    case "sword":
    case "mace":
    case "dagger":
    case "club":
    case "axe":
      return "basic_strike";
    default:
      return "illegal_combination";
    }
}






