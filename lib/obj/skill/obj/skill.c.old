/* skill.c
   Coder: aluna
   */
#include <skill.h>

#define LEGALSTAT ({"str","dex","agi","con","siz","pow","int","wis","cha"})
#define TUNEMOD 1

int node, restricted, base_percent;
string *base_stat, parent, name, type, extra_help;
int *per, train_diff,maneuver;
int ep_cost, sp_cost, hp_cost;
int duration, skill_duration, skill_power;

void create()
{
    node=0;
    restricted=0;
    maneuver=0;
    base_percent=5;
    train_diff=100;
    ep_cost=1;
    sp_cost=0;
    hp_cost=0;
    duration=5;
    skill_duration=0; // Instant
    skill_power=1; // Minimum
    base_stat=({});
    parent="";
    per=({});
    this_object()->create_skill();
}

void reset (int arg)
{
}

/* What the variables do:
   restricted: This cannot be learned without teaching from someone.
   train_difficulty: This affects how difficult the skill is to learn.
   duration: Affects how long it takes to activate the skill
   skill_duration: Affects how long the skill with be active
   skill_power: Affects the power level of the skill
   */

int set_restricted() { return restricted=1;}
int set_base_percent(int i) { return base_percent=i;}
int set_train_difficulty(int i) { return train_diff=i;}
int set_duration(int i) { return duration=i;} // Action Duration
int set_skill_duration(int i) { return skill_duration=i;}
int set_skill_power(int i) { return skill_power=i;}

int set_hp_cost(int i) { return hp_cost=i;}
int set_sp_cost(int i) { return sp_cost=i;}
int set_ep_cost(int i) { return ep_cost=i;}

int query_is_skill_node() { return node;}
int query_is_restricted() { return restricted;}
int query_is_maneuver() { return maneuver;}
int query_base_percent() { return base_percent;}
int query_train_difficulty() { return train_diff;}
int query_duration() { return duration;}
int query_skill_duration() { return skill_duration;}
int query_skill_power() { return skill_power;}

int query_hp_cost() { return hp_cost;}
int query_sp_cost() { return sp_cost;}
int query_ep_cost() { return ep_cost;}

string set_help(string s) { return extra_help=s;}

string query_true_type()
{
    object ob;
    if(parent=="")
	return "node";
    if(parent=="skill_root")
	return name;
    ob=load_object(SKILLDIR+parent);
    if(ob)
	return ob->query_true_type();
    else
	return name;
}
/* What these variables do:
   name: the name of the skill. This is usually the file name of the skill.
   parent: the name of the parent skill in the skill tree.
   type: this variable can be used to store miscellaneous information.
   Examples: hidden, node, maneuver and so on.
   */

string set_skill_name(string s) { name=s;}
string set_parent_skill(string s) { parent=s;}
string set_skill_type(string s) { type=s;}

string query_skill_name() { return name;}
string query_parent_skill() { return parent;}
string query_skill_type()
{
    if(!type)
	type=query_true_type();
    return type;
}

void do_skill(object me, string target, int result)
{
    if(node)
	return;
    write("This skill is either automatic or not fineshed yet.\n");
    return;
}

void do_critical_failure(object me, string target, int result)
{
    this_object()->do_failure(me, target, result);
}

void do_failure(object me, string target, int result)
{
    this_object()->do_skill(me,target,result);
}

void do_success(object me, string target, int result)
{
    this_object()->do_skill(me,target,result);
}

void do_critical_success(object me,string target,int result)
{
    this_object()->do_success(me,target,result);
}

void do_skill_cost(object me, string target)
{
    if(hp_cost)
	me->add_hp(-hp_cost);
    if(sp_cost)
	me->add_sp(-sp_cost);
    if(ep_cost)
	me->add_ep(-ep_cost);
}

void add_base_stat(string base, int percent)
{
    if(member_array(base,LEGALSTAT)<0)
	return;
    base_stat+=({base});
    per+=({percent});
}

void list_base_stats()
{
    int i;
    for(i=0;i<sizeof(base_stat);i++)
	write(base_stat[i]+":"+per[i]+"\n");
    return;
}
mixed query_base_stats()
{
    int i;
    mixed arr;
    arr=({});
    for (i=0;i<sizeof(base_stat);i++)
	arr+=({base_stat[i],per[i]});
    return arr;
}

int calculate_skill_base (object who)
{
    int i, val;
    float sum;
    return base_percent;

    /* This function calculates base chance of the  skill for object who.
	    The function uses natural stat values for calculations.
    */

    for(i=0;i<sizeof(base_stat);i++)
    {
	switch (base_stat[i])
	{
	case "str":
	    sum+=who->query_str()*per[i];
	    break;
	case "dex":
	    sum+=who->query_dex()*per[i];
	    break;
	case "con":
	    sum+=who->query_con()*per[i];
	    break;
	case "siz":
	    sum+=who->query_siz()*per[i];
	    break;
	case "int":
	    sum+=who->query_int()*per[i];
	    break;
	case "wis":
	    sum+=who->query_wis()*per[i];
	    break;
	case "pow":
	    sum+=who->query_pow()*per[i];
	    break;
	case "cha":
	    sum+=who->query_cha()*per[i];
	    break;
	case "agi":
	    sum+=who->query_agi()*per[i];
	    break;
	}
    }
    val=base_percent+(int)(sum/(200*i));
    return val;
}

int query_advance_skill(int bas, int exp)
{
    if(train_diff*bas*TUNEMOD<exp)
	return 1;
    return 0;
}
int query_advance_exp(int bas, int exp)
{
    return (train_diff*bas*TUNEMOD-exp);
}

int query_can_use(object me, string target)
{
    if(me->query_ep()<THOB->query_ep_cost())
    {
	tell_object(me,"You feel too tired to do that yet.\n");
	return 0;
    }
    if(me->query_sp()<THOB->query_sp_cost())
    {
	tell_object(me,"You feel magically too exhausted to do that yet.\n");
	return 0;
    }
    if(me->query_hp()<THOB->query_hp_cost())
    {
	tell_object(me,"You feel too weak to do that yet.\n");
	return 0;
    }
    return 1;
}

query_help()
{
    string msg;
    if(extra_help)
	msg=extra_help;
    else
	msg="";
    msg+="Skill type: "+query_skill_type()+"\n";
    return msg;
}
