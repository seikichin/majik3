###############################################################################
#              Customizable runtime config file for MudOS v21                 #
###############################################################################
# NOTE: All paths specified here are relative to the mudlib directory except  #
#       for mudlib directory, and binary directory.                           #
# Lines beginning with a # or a newline are ignored.                          #
###############################################################################

# name of this mud
name : Majik 3

# port number to accept users on
port number : 7600

# pathname of mudlib
mudlib directory : ./lib

# debug.log and author/domain stats are stored here
log directory : /log

# the directories which are searched by #include <...>
# for multiple dirs, separate each path with a ':'
include directories : /include

# Directory to save binaries in.  (if BINARIES is defined)
save binaries directory : /binaries

# the file which defines the master object
master file : /secure/master

# the file where all global simulated efuns are defined.
simulated efun file : /secure/simul_efun

# alternate debug.log file name (assumed to be in specified 'log directory')
debug log file : debug.log

# This is an include file which is automatically #include'd in all objects
global include file : <mudlib.h>

# if an object is left alone for a certain time, then the
# function clean_up will be called. This function can do anything,
# like destructing the object. If the function isn't defined by the
# object, then nothing will happen.
# This time should be substantially longer than the swapping time.
time to clean up : 900

# How long time until an unused object is swapped out.
# Machine with too many players and too little memory: 900 (15 minutes)
# Machine with few players and lot of memory: 10000
# Machine with infinite memory: 0 (never swap).
time to swap : 0

# How many seconds until an object is reset again.
time to reset : 1800

# Maximum number of bits in a bit field. They are stored in printable
# strings, 6 bits per byte.
maximum bits in a bitfield : 1200

# Max number of local variables in a function.
maximum local variables : 30

# Maximum amount of "eval cost" per thread - execution is halted when
# it is exceeded.
maximum evaluation cost : 10000000

# This is the maximum array size allowed for one single array.
maximum array size : 150000

# This is the maximum allowed size of a variable of type 'buffer'.
maximum buffer size : 300000

# Max size for a mapping
maximum mapping size : 15000

# Max inherit chain size
inherit chain size : 30

# maximum length of a string variable
maximum string length : 400000

# Max size of a file allowed to be read by 'read_file()'.
maximum read file size : 400000

# max number of bytes you allow to be read and written with read_bytes
# and write_bytes
maximum byte transfer : 400000

# Define the size of the shared string hash table.  This number should
# a prime, probably between 1000 and 30000; if you set it to about 1/5
# of the number of distinct strings you have, you will get a hit ratio
# (number of comparisons to find a string) very close to 1, as found strings
# are automatically moved to the head of a hash chain.  You will never
# need more, and you will still get good results with a smaller table.
hash table size : 7001

# Object hash table size.
# Define this like you did with the strings; probably set to about 1/4 of
# the number of objects in a game, as the distribution of accesses to
# objects is somewhat more uniform than that of strings.
object table size : 1501

# default no-matching-action message
default fail message : What?

# default message when error() occurs (optional)
default error message : Fatal error has occured in the player object - please logoff immediately!

# These were previously in local_options, but new FluffOS wants to have
# them here
no resets : 0
lazy resets : 0
heartbeat interval msec : 3000
no ansi : 1
strip before process input : 1
this_player in call_out : 1
trace code : 0
trace lpc instructions : 0
interactive catch tell : 0
noninteractive stderr write : 1
trap crashes : 1
old type behavior : 0
old range behavior : 0
supress argument warnings : 1
